1,1501c1,1347
< INT
< IDENTIFIER(main)
< LPAR
< VOID
< RPAR
< SEMI
< VOID
< IDENTIFIER(chara)
< LPAR
< INT
< IDENTIFIER(integer)
< COMMA
< DOUBLE
< COMMA
< VOID
< IDENTIFIER(a)
< COMMA
< DOUBLE
< COMMA
< INT
< COMMA
< CHAR
< RPAR
< SEMI
< INT
< IDENTIFIER(a)
< ASSIGN
< NATURAL(2)
< SEMI
< VOID
< IDENTIFIER(as)
< ASSIGN
< NATURAL(2)
< PLUS
< NATURAL(2)
< SEMI
< DOUBLE
< IDENTIFIER(p)
< ASSIGN
< NATURAL(2)
< MINUS
< NATURAL(2)
< MINUS
< NATURAL(2)
< MINUS
< NATURAL(2)
< MUL
< NATURAL(2)
< MUL
< NATURAL(2)
< COMMA
< IDENTIFIER(bs)
< ASSIGN
< LPAR
< LPAR
< LPAR
< LPAR
< LPAR
< LPAR
< LPAR
< LPAR
< LPAR
< LPAR
< LPAR
< LPAR
< NATURAL(2)
< RPAR
< RPAR
< RPAR
< RPAR
< RPAR
< RPAR
< PLUS
< NATURAL(2)
< RPAR
< RPAR
< RPAR
< RPAR
< RPAR
< RPAR
< COMMA
< IDENTIFIER(test)
< SEMI
< VOID
< IDENTIFIER(a)
< ASSIGN
< NATURAL(2)
< MINUS
< LPAR
< IDENTIFIER(as)
< MINUS
< LPAR
< IDENTIFIER(aasd)
< RPAR
< PLUS
< NATURAL(2)
< MUL
< NATURAL(2)
< RPAR
< COMMA
< IDENTIFIER(b)
< SEMI
< INT
< IDENTIFIER(test)
< LPAR
< VOID
< IDENTIFIER(a)
< COMMA
< INT
< RPAR
< SEMI
< INT
< IDENTIFIER(abcde)
< LPAR
< INT
< IDENTIFIER(a)
< COMMA
< INT
< IDENTIFIER(b)
< COMMA
< INT
< IDENTIFIER(i)
< RPAR
< LBRACE
< RETURN
< IDENTIFIER(b)
< SEMI
< WHILE
< LPAR
< IDENTIFIER(i)
< EQ
< NATURAL(0)
< RPAR
< LBRACE
< IF
< LPAR
< LPAR
< IDENTIFIER(i)
< ASSIGN
< NATURAL(123)
< AND
< LPAR
< LPAR
< IDENTIFIER(i)
< LT
< NATURAL(2)
< AND
< IDENTIFIER(i)
< BITWISEAND
< NATURAL(1)
< RPAR
< RPAR
< RPAR
< OR
< LPAR
< LPAR
< LPAR
< LPAR
< LPAR
< LPAR
< IDENTIFIER(i)
< BITWISEOR
< NATURAL(1)
< RPAR
< RPAR
< RPAR
< RPAR
< RPAR
< RPAR
< RPAR
< LBRACE
< IDENTIFIER(i)
< ASSIGN
< NATURAL(0123)
< SEMI
< RBRACE
< ELSE
< LBRACE
< IF
< LPAR
< IDENTIFIER(a)
< EQ
< NATURAL(2)
< OR
< IDENTIFIER(b)
< LE
< NATURAL(2)
< AND
< LPAR
< IDENTIFIER(c)
< GE
< NATURAL(3)
< AND
< IDENTIFIER(d)
< BITWISEXOR
< NATURAL(0)
< OR
< IDENTIFIER(x)
< BITWISEOR
< NATURAL(1)
< AND
< IDENTIFIER(x)
< BITWISEAND
< NATURAL(0)
< RPAR
< RPAR
< LBRACE
< IDENTIFIER(b)
< ASSIGN
< NOT
< IDENTIFIER(b)
< SEMI
< IDENTIFIER(c)
< ASSIGN
< MINUS
< IDENTIFIER(c)
< SEMI
< IDENTIFIER(c)
< ASSIGN
< MINUS
< IDENTIFIER(c)
< MOD
< MINUS
< IDENTIFIER(d)
< SEMI
< RBRACE
< RBRACE
< RBRACE
< LBRACE
< IDENTIFIER(a)
< ASSIGN
< NATURAL(1)
< SEMI
< IDENTIFIER(b)
< ASSIGN
< NATURAL(2)
< SEMI
< RBRACE
< LBRACE
< IDENTIFIER(a)
< ASSIGN
< NATURAL(1)
< SEMI
< IDENTIFIER(b)
< ASSIGN
< NATURAL(2)
< SEMI
< IDENTIFIER(c)
< ASSIGN
< NATURAL(3)
< SEMI
< IDENTIFIER(d)
< ASSIGN
< NATURAL(4)
< SEMI
< RBRACE
< LBRACE
< SEMI
< RBRACE
< LBRACE
< IDENTIFIER(e)
< ASSIGN
< NATURAL(4)
< SEMI
< RBRACE
< LBRACE
< RBRACE
< LBRACE
< LBRACE
< SEMI
< RBRACE
< RBRACE
< LBRACE
< IDENTIFIER(f)
< ASSIGN
< NATURAL(5)
< SEMI
< RBRACE
< IF
< LPAR
< IDENTIFIER(a)
< RPAR
< LBRACE
< RBRACE
< ELSE
< LBRACE
< IDENTIFIER(a)
< ASSIGN
< NATURAL(1)
< SEMI
< IDENTIFIER(b)
< ASSIGN
< NATURAL(2)
< SEMI
< RBRACE
< IF
< LPAR
< IDENTIFIER(b)
< RPAR
< LBRACE
< RBRACE
< ELSE
< LBRACE
< IDENTIFIER(x)
< ASSIGN
< NATURAL(1)
< SEMI
< IDENTIFIER(y)
< ASSIGN
< NATURAL(2)
< SEMI
< RBRACE
< IF
< LPAR
< IDENTIFIER(c)
< RPAR
< LBRACE
< RBRACE
< IF
< LPAR
< IDENTIFIER(d)
< RPAR
< LBRACE
< IDENTIFIER(a)
< ASSIGN
< NATURAL(1)
< SEMI
< IDENTIFIER(b)
< ASSIGN
< NATURAL(2)
< SEMI
< IDENTIFIER(c)
< ASSIGN
< NATURAL(3)
< SEMI
< RBRACE
< RBRACE
< INT
< IDENTIFIER(okokok)
< LPAR
< VOID
< RPAR
< LBRACE
< INT
< IDENTIFIER(i)
< ASSIGN
< IDENTIFIER(i)
< PLUS
< IDENTIFIER(i)
< SEMI
< RBRACE
< VOID
< IDENTIFIER(new)
< LPAR
< VOID
< RPAR
< SEMI
< INT
< IDENTIFIER(factorial)
< LPAR
< INT
< IDENTIFIER(number)
< RPAR
< LBRACE
< INT
< IDENTIFIER(answer)
< ASSIGN
< NATURAL(1)
< SEMI
< WHILE
< LPAR
< IDENTIFIER(number)
< NE
< NATURAL(0)
< RPAR
< LBRACE
< IDENTIFIER(answer)
< ASSIGN
< IDENTIFIER(answer)
< MUL
< IDENTIFIER(number)
< SEMI
< IDENTIFIER(number)
< ASSIGN
< IDENTIFIER(number)
< MINUS
< NATURAL(1)
< SEMI
< RBRACE
< RETURN
< IDENTIFIER(answer)
< SEMI
< RBRACE
< INT
< IDENTIFIER(recursive_factorial)
< LPAR
< INT
< IDENTIFIER(number)
< RPAR
< LBRACE
< IF
< LPAR
< IDENTIFIER(num)
< EQ
< NATURAL(0)
< RPAR
< LBRACE
< RETURN
< NATURAL(1)
< SEMI
< RBRACE
< RETURN
< IDENTIFIER(number)
< MUL
< IDENTIFIER(recursive_factorial)
< LPAR
< IDENTIFIER(number)
< RPAR
< SEMI
< RBRACE
< INT
< IDENTIFIER(tail_recursive_fac)
< LPAR
< INT
< IDENTIFIER(number)
< COMMA
< INT
< IDENTIFIER(k)
< RPAR
< LBRACE
< INT
< IDENTIFIER(bola)
< SEMI
< INT
< IDENTIFIER(i)
< ASSIGN
< IDENTIFIER(bola)
< LPAR
< NATURAL(2)
< COMMA
< NATURAL(3)
< RPAR
< SEMI
< IF
< LPAR
< IDENTIFIER(number)
< EQ
< NATURAL(0)
< RPAR
< LBRACE
< RETURN
< NATURAL(1)
< SEMI
< RBRACE
< RETURN
< IDENTIFIER(factorial)
< LPAR
< IDENTIFIER(number)
< MINUS
< NATURAL(1)
< COMMA
< IDENTIFIER(k)
< MUL
< IDENTIFIER(number)
< RPAR
< SEMI
< RBRACE
< INT
< IDENTIFIER(main)
< LPAR
< VOID
< RPAR
< LBRACE
< IDENTIFIER(func1)
< LPAR
< NATURAL(1)
< COMMA
< NATURAL(2)
< COMMA
< NATURAL(3)
< RPAR
< SEMI
< IDENTIFIER(func2)
< LPAR
< LPAR
< NATURAL(1)
< COMMA
< NATURAL(2)
< RPAR
< COMMA
< NATURAL(3)
< RPAR
< SEMI
< IF
< LPAR
< IDENTIFIER(a)
< RPAR
< LBRACE
< IDENTIFIER(statement1)
< ASSIGN
< NATURAL(1)
< SEMI
< RBRACE
< ELSE
< LBRACE
< IDENTIFIER(statement2)
< ASSIGN
< NATURAL(2)
< SEMI
< RBRACE
< IF
< LPAR
< IDENTIFIER(a)
< RPAR
< LBRACE
< IDENTIFIER(statement1)
< ASSIGN
< NATURAL(1)
< SEMI
< RBRACE
< IF
< LPAR
< IDENTIFIER(a)
< RPAR
< SEMI
< ELSE
< LBRACE
< IDENTIFIER(statement2)
< ASSIGN
< NATURAL(2)
< SEMI
< RBRACE
< IF
< LPAR
< IDENTIFIER(a)
< RPAR
< SEMI
< ELSE
< SEMI
< WHILE
< LPAR
< IDENTIFIER(a)
< RPAR
< LBRACE
< IDENTIFIER(statement2)
< ASSIGN
< NATURAL(2)
< SEMI
< RBRACE
< WHILE
< LPAR
< IDENTIFIER(a)
< RPAR
< SEMI
< WHILE
< LPAR
< IDENTIFIER(a)
< RPAR
< LBRACE
< RBRACE
< WHILE
< LPAR
< IDENTIFIER(a)
< RPAR
< LBRACE
< IDENTIFIER(statement1)
< ASSIGN
< NATURAL(1)
< SEMI
< IDENTIFIER(statement2)
< ASSIGN
< NATURAL(2)
< SEMI
< IDENTIFIER(statement3)
< ASSIGN
< NATURAL(3)
< SEMI
< RBRACE
< LBRACE
< SEMI
< RBRACE
< LBRACE
< IDENTIFIER(statement1)
< ASSIGN
< NATURAL(1)
< SEMI
< RBRACE
< LBRACE
< IDENTIFIER(statement1)
< ASSIGN
< NATURAL(1)
< SEMI
< IDENTIFIER(statement2)
< ASSIGN
< NATURAL(2)
< SEMI
< RBRACE
< INT
< IDENTIFIER(i)
< ASSIGN
< IDENTIFIER(ctoi)
< LPAR
< IDENTIFIER(getchar)
< LPAR
< RPAR
< RPAR
< SEMI
< IDENTIFIER(recursive_factorial)
< LPAR
< IDENTIFIER(i)
< RPAR
< SEMI
< IDENTIFIER(tail_recursive_fac)
< LPAR
< IDENTIFIER(i)
< RPAR
< SEMI
< IDENTIFIER(factorial)
< LPAR
< IDENTIFIER(i)
< RPAR
< SEMI
< RETURN
< NATURAL(0)
< SEMI
< RETURN
< SEMI
< RBRACE
< VOID
< IDENTIFIER(soma)
< LPAR
< INT
< IDENTIFIER(a)
< COMMA
< CHAR
< IDENTIFIER(b)
< RPAR
< SEMI
< VOID
< IDENTIFIER(subt)
< LPAR
< INT
< COMMA
< CHAR
< COMMA
< DOUBLE
< RPAR
< SEMI
< INT
< IDENTIFIER(a)
< ASSIGN
< NATURAL(3)
< COMMA
< IDENTIFIER(b)
< ASSIGN
< NATURAL(5)
< SEMI
< INT
< IDENTIFIER(d)
< ASSIGN
< NATURAL(3)
< COMMA
< IDENTIFIER(c)
< ASSIGN
< NATURAL(5)
< SEMI
< DOUBLE
< IDENTIFIER(t)
< ASSIGN
< NATURAL(3)
< SEMI
< INT
< IDENTIFIER(chama)
< LPAR
< VOID
< RPAR
< LBRACE
< IF
< LPAR
< IDENTIFIER(o)
< EQ
< IDENTIFIER(e)
< RPAR
< LBRACE
< SEMI
< SEMI
< SEMI
< WHILE
< LPAR
< IDENTIFIER(abcd)
< RPAR
< LBRACE
< SEMI
< SEMI
< SEMI
< RBRACE
< RETURN
< IDENTIFIER(a)
< SEMI
< SEMI
< SEMI
< RBRACE
< RETURN
< IDENTIFIER(c)
< SEMI
< SEMI
< SEMI
< LPAR
< IDENTIFIER(chama)
< LPAR
< NATURAL(4)
< RPAR
< RPAR
< SEMI
< RETURN
< IDENTIFIER(b)
< SEMI
< RBRACE
< INT
< IDENTIFIER(uauu)
< LPAR
< VOID
< RPAR
< LBRACE
< CHAR
< IDENTIFIER(a)
< ASSIGN
< MINUS
< NATURAL(4)
< PLUS
< NATURAL(3)
< MINUS
< LPAR
< MINUS
< NATURAL(3)
< RPAR
< SEMI
< INT
< IDENTIFIER(b)
< ASSIGN
< IDENTIFIER(a)
< PLUS
< NATURAL(4)
< MINUS
< LPAR
< MINUS
< IDENTIFIER(a)
< RPAR
< SEMI
< CHAR
< IDENTIFIER(a)
< ASSIGN
< NATURAL(5)
< SEMI
< IDENTIFIER(a)
< ASSIGN
< NATURAL(5)
< SEMI
< IDENTIFIER(a)
< EQ
< NATURAL(5)
< SEMI
< IDENTIFIER(a)
< LT
< NATURAL(5)
< SEMI
< SEMI
< SEMI
< SEMI
< SEMI
< WHILE
< LPAR
< NOT
< IDENTIFIER(a)
< RPAR
< IF
< LPAR
< NATURAL(2)
< RPAR
< IDENTIFIER(a)
< ASSIGN
< NATURAL(3)
< PLUS
< NATURAL(3)
< SEMI
< ELSE
< IDENTIFIER(a)
< ASSIGN
< IDENTIFIER(r)
< SEMI
< WHILE
< LPAR
< LPAR
< IDENTIFIER(a)
< EQ
< NATURAL(3)
< AND
< IDENTIFIER(b)
< LT
< IDENTIFIER(a)
< RPAR
< OR
< IDENTIFIER(a)
< LT
< NATURAL(3)
< RPAR
< LBRACE
< IDENTIFIER(a)
< ASSIGN
< IDENTIFIER(b)
< SEMI
< IDENTIFIER(b)
< ASSIGN
< NATURAL(3)
< SEMI
< WHILE
< LPAR
< NATURAL(1)
< RPAR
< LBRACE
< IDENTIFIER(a)
< ASSIGN
< NATURAL(0)
< SEMI
< RBRACE
< IDENTIFIER(c)
< ASSIGN
< NATURAL(5)
< SEMI
< RBRACE
< IF
< LPAR
< LPAR
< IDENTIFIER(a)
< EQ
< NATURAL(3)
< AND
< IDENTIFIER(e)
< EQ
< NATURAL(3)
< BITWISEAND
< NATURAL(5)
< RPAR
< RPAR
< RETURN
< IDENTIFIER(b)
< SEMI
< ELSE
< SEMI
< RETURN
< IDENTIFIER(a)
< SEMI
< RBRACE
< INT
< IDENTIFIER(ctoi)
< LPAR
< CHAR
< IDENTIFIER(c)
< RPAR
< LBRACE
< IF
< LPAR
< IDENTIFIER(c)
< GE
< CHRLIT('0')
< AND
< IDENTIFIER(c)
< LE
< CHRLIT('9')
< RPAR
< LBRACE
< RETURN
< IDENTIFIER(c)
< MINUS
< CHRLIT('0')
< SEMI
< RBRACE
< RBRACE
< CHAR
< IDENTIFIER(block)
< LPAR
< CHAR
< IDENTIFIER(a)
< COMMA
< CHAR
< IDENTIFIER(b)
< RPAR
< LBRACE
< IF
< LPAR
< IDENTIFIER(a)
< LT
< IDENTIFIER(b)
< RPAR
< LBRACE
< IDENTIFIER(a)
< ASSIGN
< IDENTIFIER(a)
< MINUS
< NATURAL(1)
< SEMI
< RETURN
< IDENTIFIER(a)
< SEMI
< RBRACE
< ELSE
< LBRACE
< IDENTIFIER(b)
< ASSIGN
< IDENTIFIER(b)
< MINUS
< NATURAL(1)
< SEMI
< RETURN
< IDENTIFIER(b)
< SEMI
< RBRACE
< RBRACE
< INT
< IDENTIFIER(check_your_priorities)
< LPAR
< INT
< IDENTIFIER(a)
< COMMA
< INT
< IDENTIFIER(b)
< COMMA
< INT
< IDENTIFIER(d)
< RPAR
< LBRACE
< RETURN
< IDENTIFIER(a)
< PLUS
< LPAR
< IDENTIFIER(b)
< MUL
< LPAR
< MINUS
< IDENTIFIER(d)
< DIV
< IDENTIFIER(c)
< PLUS
< NATURAL(3)
< RPAR
< MUL
< IDENTIFIER(d)
< PLUS
< IDENTIFIER(c)
< RPAR
< PLUS
< IDENTIFIER(d)
< SEMI
< RBRACE
< CHAR
< IDENTIFIER(not_block)
< LPAR
< CHAR
< IDENTIFIER(a)
< COMMA
< CHAR
< IDENTIFIER(b)
< RPAR
< LBRACE
< IF
< LPAR
< IDENTIFIER(weird_char)
< LPAR
< IDENTIFIER(a)
< COMMA
< IDENTIFIER(b)
< RPAR
< LT
< IDENTIFIER(b)
< RPAR
< RETURN
< IDENTIFIER(a)
< SEMI
< ELSE
< RETURN
< IDENTIFIER(b)
< SEMI
< RBRACE
< INT
< IDENTIFIER(x)
< COMMA
< IDENTIFIER(y)
< COMMA
< IDENTIFIER(z)
< SEMI
< DOUBLE
< IDENTIFIER(check_your_decimal)
< LPAR
< DOUBLE
< IDENTIFIER(a)
< COMMA
< DOUBLE
< IDENTIFIER(b)
< RPAR
< LBRACE
< DOUBLE
< IDENTIFIER(PI)
< ASSIGN
< DECIMAL(3.14)
< SEMI
< RETURN
< IDENTIFIER(a)
< MINUS
< IDENTIFIER(b)
< MUL
< IDENTIFIER(PI)
< SEMI
< RBRACE
< INT
< IDENTIFIER(main_0)
< LPAR
< VOID
< RPAR
< LBRACE
< SEMI
< SEMI
< SEMI
< SEMI
< SEMI
< SEMI
< SEMI
< SEMI
< SEMI
< SEMI
< SEMI
< SEMI
< SEMI
< SEMI
< SEMI
< LBRACE
< LBRACE
< LBRACE
< LBRACE
< LBRACE
< RBRACE
< RBRACE
< RBRACE
< RBRACE
< RBRACE
< SEMI
< WHILE
< LPAR
< IDENTIFIER(a)
< RPAR
< LBRACE
< SEMI
< SEMI
< SEMI
< RETURN
< MINUS
< NATURAL(1)
< SEMI
< RBRACE
< IF
< LPAR
< IDENTIFIER(a)
< EQ
< NATURAL(2)
< RPAR
< LBRACE
< SEMI
< RBRACE
< IF
< LPAR
< IDENTIFIER(a)
< EQ
< NATURAL(2)
< RPAR
< LBRACE
< RETURN
< IDENTIFIER(a)
< SEMI
< RBRACE
< ELSE
< LBRACE
< RETURN
< NATURAL(5)
< SEMI
< RBRACE
< WHILE
< LPAR
< IDENTIFIER(b)
< EQ
< NATURAL(3)
< RPAR
< LBRACE
< IF
< LPAR
< IDENTIFIER(a)
< EQ
< NATURAL(2)
< RPAR
< LBRACE
< RETURN
< IDENTIFIER(a)
< SEMI
< RBRACE
< LBRACE
< IF
< LPAR
< IDENTIFIER(a)
< EQ
< NATURAL(2)
< RPAR
< LBRACE
< RETURN
< IDENTIFIER(a)
< SEMI
< RBRACE
< IF
< LPAR
< IDENTIFIER(a)
< EQ
< NATURAL(2)
< RPAR
< LBRACE
< RETURN
< IDENTIFIER(a)
< SEMI
< RBRACE
< ELSE
< LBRACE
< RETURN
< NATURAL(5)
< SEMI
< RBRACE
< IF
< LPAR
< IDENTIFIER(a)
< EQ
< NATURAL(2)
< RPAR
< LBRACE
< RETURN
< IDENTIFIER(a)
< SEMI
< RBRACE
< IF
< LPAR
< IDENTIFIER(a)
< EQ
< NATURAL(2)
< RPAR
< LBRACE
< RETURN
< IDENTIFIER(a)
< SEMI
< RBRACE
< ELSE
< LBRACE
< RETURN
< NATURAL(5)
< SEMI
< RBRACE
< IF
< LPAR
< IDENTIFIER(a)
< EQ
< NATURAL(2)
< RPAR
< LBRACE
< RETURN
< IDENTIFIER(a)
< SEMI
< RBRACE
< ELSE
< LBRACE
< RETURN
< NATURAL(5)
< SEMI
< RBRACE
< RBRACE
< RETURN
< NATURAL(90)
< SEMI
< RBRACE
< SEMI
< SEMI
< SEMI
< SEMI
< SEMI
< RBRACE
< INT
< IDENTIFIER(i)
< ASSIGN
< NATURAL(0)
< COMMA
< IDENTIFIER(j)
< ASSIGN
< NATURAL(2)
< COMMA
< IDENTIFIER(k)
< SEMI
< CHAR
< IDENTIFIER(ch0)
< COMMA
< IDENTIFIER(ch1)
< ASSIGN
< NATURAL(0)
< COMMA
< IDENTIFIER(ch2)
< ASSIGN
< CHRLIT('0')
< SEMI
< DOUBLE
< IDENTIFIER(pow)
< LPAR
< DOUBLE
< IDENTIFIER(i)
< RPAR
< SEMI
< DOUBLE
< IDENTIFIER(pow)
< LPAR
< DOUBLE
< IDENTIFIER(i)
< RPAR
< SEMI
< DOUBLE
< IDENTIFIER(pow)
< LPAR
< INT
< IDENTIFIER(i)
< RPAR
< SEMI
< INT
< IDENTIFIER(pow)
< LPAR
< INT
< IDENTIFIER(i)
< RPAR
< LBRACE
< RBRACE
< CHAR
< IDENTIFIER(c1)
< COMMA
< IDENTIFIER(c2)
< SEMI
< SHORT
< IDENTIFIER(s)
< COMMA
< IDENTIFIER(t)
< SEMI
< INT
< IDENTIFIER(i)
< COMMA
< IDENTIFIER(j)
< SEMI
< CHAR
< IDENTIFIER(f1)
< LPAR
< VOID
< RPAR
< LBRACE
< SHORT
< IDENTIFIER(s)
< SEMI
< INT
< IDENTIFIER(i)
< SEMI
< DOUBLE
< IDENTIFIER(d)
< SEMI
< DOUBLE
< IDENTIFIER(d)
< COMMA
< IDENTIFIER(e)
< SEMI
< INT
< IDENTIFIER(a)
< SEMI
< INT
< IDENTIFIER(a)
< SEMI
< DOUBLE
< IDENTIFIER(b)
< COMMA
< IDENTIFIER(b)
< COMMA
< IDENTIFIER(a)
< SEMI
< RETURN
< IDENTIFIER(c1)
< SEMI
< RBRACE
< CHAR
< IDENTIFIER(a)
< SEMI
< CHAR
< IDENTIFIER(a)
< ASSIGN
< CHRLIT('a')
< SEMI
< CHAR
< IDENTIFIER(b)
< SEMI
< INT
< IDENTIFIER(blah)
< LPAR
< VOID
< RPAR
< SEMI
< DOUBLE
< IDENTIFIER(df)
< LPAR
< DOUBLE
< COMMA
< DOUBLE
< RPAR
< SEMI
< DOUBLE
< IDENTIFIER(df)
< LPAR
< DOUBLE
< IDENTIFIER(d)
< COMMA
< DOUBLE
< IDENTIFIER(dd)
< RPAR
< LBRACE
< INT
< IDENTIFIER(ch0)
< ASSIGN
< NATURAL(20)
< COMMA
< IDENTIFIER(calc)
< SEMI
< CHAR
< IDENTIFIER(ch1)
< SEMI
< IF
< LPAR
< IDENTIFIER(ch0)
< ASSIGN
< NATURAL(3)
< OR
< IDENTIFIER(ch0)
< EQ
< NATURAL(3)
< RPAR
< LBRACE
< IDENTIFIER(infinite_putchar)
< LPAR
< IDENTIFIER(ch0)
< RPAR
< SEMI
< RBRACE
< ELSE
< LBRACE
< IDENTIFIER(infinite_putchar)
< LPAR
< IDENTIFIER(ch0)
< ASSIGN
< IDENTIFIER(ch0)
< PLUS
< NATURAL(10)
< RPAR
< SEMI
< RBRACE
< IDENTIFIER(ch2)
< ASSIGN
< IDENTIFIER(getchar)
< LPAR
< RPAR
< SEMI
< IDENTIFIER(ch1)
< ASSIGN
< IDENTIFIER(getchar)
< LPAR
< RPAR
< SEMI
< CHAR
< IDENTIFIER(a)
< ASSIGN
< CHRLIT('a')
< SEMI
< SHORT
< IDENTIFIER(b)
< ASSIGN
< NATURAL(2)
< SEMI
< INT
< IDENTIFIER(c)
< ASSIGN
< NATURAL(3)
< SEMI
< DOUBLE
< IDENTIFIER(d)
< ASSIGN
< DECIMAL(3.0)
< SEMI
< DOUBLE
< IDENTIFIER(x)
< ASSIGN
< DECIMAL(1.5)
< SEMI
< INT
< IDENTIFIER(a)
< ASSIGN
< NATURAL(1)
< COMMA
< IDENTIFIER(b)
< ASSIGN
< NATURAL(2)
< COMMA
< IDENTIFIER(c)
< ASSIGN
< NATURAL(3)
< SEMI
< SHORT
< IDENTIFIER(d)
< ASSIGN
< NATURAL(4)
< SEMI
< CHAR
< IDENTIFIER(c)
< ASSIGN
< CHRLIT('a')
< SEMI
< IDENTIFIER(a)
< ASSIGN
< LPAR
< MINUS
< NATURAL(1)
< MUL
< NATURAL(3)
< PLUS
< NATURAL(2)
< DIV
< NATURAL(4)
< RPAR
< SEMI
< SHORT
< IDENTIFIER(a)
< SEMI
< CHAR
< IDENTIFIER(c)
< SEMI
< IDENTIFIER(function)
< LPAR
< NATURAL(1)
< RPAR
< PLUS
< IDENTIFIER(function)
< LPAR
< NATURAL(1)
< RPAR
< SEMI
< NATURAL(10)
< MUL
< LPAR
< NATURAL(5)
< LT
< IDENTIFIER(function)
< LPAR
< NATURAL(1)
< RPAR
< RPAR
< SEMI
< DECIMAL(5.5)
< MOD
< IDENTIFIER(nao_existe)
< LPAR
< RPAR
< SEMI
< DECIMAL(5.5)
< DIV
< DECIMAL(5.5)
< SEMI
< DECIMAL(5.5)
< GE
< NATURAL(5)
< SEMI
< DECIMAL(5.5)
< NE
< IDENTIFIER(a)
< SEMI
< NATURAL(5)
< EQ
< IDENTIFIER(a)
< SEMI
< DECIMAL(5.5)
< BITWISEXOR
< IDENTIFIER(c)
< SEMI
< IDENTIFIER(a)
< AND
< IDENTIFIER(c)
< SEMI
< IDENTIFIER(c)
< PLUS
< IDENTIFIER(c)
< SEMI
< IDENTIFIER(c)
< ASSIGN
< NATURAL(
\ No newline at end of file
---
> Line 3, column 33: Invalid use of void type in declaration
> Line 5, column 6: Invalid use of void type in declaration
> Line 7, column 13: Unknown symbol as
> Line 7, column 17: Unknown symbol aasd
> Line 7, column 15: Operator - cannot be applied to types undef, undef
> Line 7, column 23: Operator + cannot be applied to types undef, int
> Line 7, column 11: Operator - cannot be applied to types int, undef
> Line 7, column 6: Invalid use of void type in declaration
> Line 7, column 31: Invalid use of void type in declaration
> Line 8, column 10: Invalid use of void type in declaration
> Line 15, column 20: Unknown symbol c
> Line 15, column 21: Operator >= cannot be applied to types undef, int
> Line 15, column 26: Unknown symbol d
> Line 15, column 27: Operator ^ cannot be applied to types undef, int
> Line 15, column 31: Unknown symbol x
> Line 15, column 32: Operator | cannot be applied to types undef, int
> Line 15, column 36: Unknown symbol x
> Line 15, column 37: Operator & cannot be applied to types undef, int
> Line 17, column 5: Unknown symbol c
> Line 17, column 10: Unknown symbol c
> Line 17, column 9: Operator - cannot be applied to type undef
> Line 17, column 7: Operator = cannot be applied to types undef, undef
> Line 18, column 5: Unknown symbol c
> Line 18, column 10: Unknown symbol c
> Line 18, column 9: Operator - cannot be applied to type undef
> Line 18, column 13: Unknown symbol d
> Line 18, column 12: Operator - cannot be applied to type undef
> Line 18, column 11: Operator % cannot be applied to types undef, undef
> Line 18, column 7: Operator = cannot be applied to types undef, int
> Line 23, column 11: Unknown symbol c
> Line 23, column 12: Operator = cannot be applied to types undef, int
> Line 23, column 15: Unknown symbol d
> Line 23, column 16: Operator = cannot be applied to types undef, int
> Line 25, column 3: Unknown symbol e
> Line 25, column 4: Operator = cannot be applied to types undef, int
> Line 30, column 3: Unknown symbol f
> Line 30, column 4: Operator = cannot be applied to types undef, int
> Line 42, column 3: Unknown symbol x
> Line 42, column 4: Operator = cannot be applied to types undef, int
> Line 42, column 7: Unknown symbol y
> Line 42, column 8: Operator = cannot be applied to types undef, int
> Line 46, column 5: Unknown symbol c
> Line 46, column 5: Conflicting types (got undef, expected int)
> Line 50, column 5: Unknown symbol d
> Line 50, column 5: Conflicting types (got undef, expected int)
> Line 51, column 11: Unknown symbol c
> Line 51, column 12: Operator = cannot be applied to types undef, int
> Line 56, column 8: Unknown symbol i
> Line 56, column 10: Unknown symbol i
> Line 56, column 9: Operator + cannot be applied to types undef, undef
> Line 68, column 9: Unknown symbol num
> Line 68, column 13: Operator == cannot be applied to types undef, int
> Line 76, column 8: Wrong number of arguments to function bola (got 2, required 0)
> Line 80, column 12: Wrong number of arguments to function factorial (got 2, required 1)
> Line 83, column 2: Unknown symbol func1
> Line 83, column 2: Wrong number of arguments to function func1 (got 3, required 0)
> Line 85, column 2: Unknown symbol func2
> Line 85, column 2: Wrong number of arguments to function func2 (got 2, required 0)
> Line 88, column 3: Unknown symbol statement1
> Line 88, column 14: Operator = cannot be applied to types undef, int
> Line 90, column 3: Unknown symbol statement2
> Line 90, column 14: Operator = cannot be applied to types undef, int
> Line 94, column 3: Unknown symbol statement1
> Line 94, column 14: Operator = cannot be applied to types undef, int
> Line 98, column 3: Unknown symbol statement2
> Line 98, column 14: Operator = cannot be applied to types undef, int
> Line 104, column 3: Unknown symbol statement2
> Line 104, column 14: Operator = cannot be applied to types undef, int
> Line 114, column 3: Unknown symbol statement1
> Line 114, column 14: Operator = cannot be applied to types undef, int
> Line 115, column 3: Unknown symbol statement2
> Line 115, column 14: Operator = cannot be applied to types undef, int
> Line 116, column 3: Unknown symbol statement3
> Line 116, column 14: Operator = cannot be applied to types undef, int
> Line 120, column 3: Unknown symbol statement1
> Line 120, column 14: Operator = cannot be applied to types undef, int
> Line 122, column 3: Unknown symbol statement1
> Line 122, column 14: Operator = cannot be applied to types undef, int
> Line 122, column 19: Unknown symbol statement2
> Line 122, column 30: Operator = cannot be applied to types undef, int
> Line 123, column 10: Unknown symbol ctoi
> Line 123, column 10: Wrong number of arguments to function ctoi (got 1, required 0)
> Line 126, column 6: Wrong number of arguments to function tail_recursive_fac (got 1, required 2)
> Line 130, column 2: Conflicting types (got void, expected int)
> Line 139, column 9: Unknown symbol o
> Line 139, column 12: Unknown symbol e
> Line 141, column 16: Unknown symbol abcd
> Line 141, column 16: Conflicting types (got undef, expected int)
> Line 149, column 6: Wrong number of arguments to function chama (got 1, required 0)
> Line 156, column 10: Symbol a already defined
> Line 163, column 16: Unknown symbol r
> Line 163, column 15: Operator = cannot be applied to types char, undef
> Line 174, column 18: Unknown symbol e
> Line 174, column 19: Operator == cannot be applied to types undef, int
> Line 201, column 9: Unknown symbol weird_char
> Line 201, column 9: Wrong number of arguments to function weird_char (got 2, required 0)
> Line 201, column 26: Operator < cannot be applied to types undef, char
> Line 276, column 8: Conflicting types (got double(int), expected double(double))
> Line 277, column 5: Conflicting types (got int(int), expected double(double))
> Line 280, column 10: Conflicting types (got short, expected double)
> Line 287, column 12: Symbol d already defined
> Line 288, column 16: Symbol a already defined
> Line 289, column 11: Symbol b already defined
> Line 289, column 13: Symbol a already defined
> Line 302, column 9: Unknown symbol infinite_putchar
> Line 302, column 9: Wrong number of arguments to function infinite_putchar (got 1, required 0)
> Line 303, column 12: Unknown symbol infinite_putchar
> Line 303, column 12: Wrong number of arguments to function infinite_putchar (got 1, required 0)
> Line 309, column 10: Symbol d already defined
> Line 312, column 6: Symbol a already defined
> Line 312, column 10: Symbol b already defined
> Line 312, column 14: Symbol c already defined
> Line 314, column 8: Symbol d already defined
> Line 316, column 7: Symbol c already defined
> Line 319, column 15: Symbol a already defined
> Line 320, column 10: Symbol c already defined
> Line 322, column 5: Unknown symbol function
> Line 322, column 5: Wrong number of arguments to function function (got 1, required 0)
> Line 322, column 19: Unknown symbol function
> Line 322, column 19: Wrong number of arguments to function function (got 1, required 0)
> Line 322, column 17: Operator + cannot be applied to types undef, undef
> Line 324, column 15: Unknown symbol function
> Line 324, column 15: Wrong number of arguments to function function (got 1, required 0)
> Line 324, column 13: Operator < cannot be applied to types int, undef
> Line 326, column 11: Unknown symbol nao_existe
> Line 326, column 9: Operator % cannot be applied to types double, undef
> Line 336, column 9: Operator ^ cannot be applied to types double, int
> Line 344, column 7: Operator = cannot be applied to types int, double
> Line 345, column 15: Unknown symbol e
> Line 345, column 15: Conflicting types (got undef, expected double)
> ===== Global Symbol Table =====
> putchar	int(int)
> getchar	int(void)
> main	int(void)
> a	int
> p	double
> bs	double
> test	double
> abcde	int(int,int,int)
> okokok	int(void)
> new	void(void)
> factorial	int(int)
> recursive_factorial	int(int)
> tail_recursive_fac	int(int,int)
> soma	void(int,char)
> subt	void(int,char,double)
> b	int
> d	int
> c	int
> t	double
> chama	int(void)
> uauu	int(void)
> ctoi	int(char)
> block	char(char,char)
> check_your_priorities	int(int,int,int)
> not_block	char(char,char)
> x	int
> y	int
> z	int
> check_your_decimal	double(double,double)
> main_0	int(void)
> i	int
> j	int
> k	int
> ch0	char
> ch1	char
> ch2	char
> pow	double(double)
> c1	char
> c2	char
> s	short
> f1	char(void)
> blah	int(void)
> df	double(double,double)
> 
> ===== Function main Symbol Table =====
> return	int
> i	int
> 
> ===== Function abcde Symbol Table =====
> return	int
> a	int	param
> b	int	param
> i	int	param
> 
> ===== Function okokok Symbol Table =====
> return	int
> i	int
> 
> ===== Function factorial Symbol Table =====
> return	int
> number	int	param
> answer	int
> 
> ===== Function recursive_factorial Symbol Table =====
> return	int
> number	int	param
> 
> ===== Function tail_recursive_fac Symbol Table =====
> return	int
> number	int	param
> k	int	param
> bola	int
> i	int
> 
> ===== Function chama Symbol Table =====
> return	int
> 
> ===== Function uauu Symbol Table =====
> return	int
> a	char
> b	int
> 
> ===== Function ctoi Symbol Table =====
> return	int
> c	char	param
> 
> ===== Function block Symbol Table =====
> return	char
> a	char	param
> b	char	param
> 
> ===== Function check_your_priorities Symbol Table =====
> return	int
> a	int	param
> b	int	param
> d	int	param
> 
> ===== Function not_block Symbol Table =====
> return	char
> a	char	param
> b	char	param
> 
> ===== Function check_your_decimal Symbol Table =====
> return	double
> a	double	param
> b	double	param
> PI	double
> 
> ===== Function main_0 Symbol Table =====
> return	int
> 
> ===== Function f1 Symbol Table =====
> return	char
> s	short
> i	int
> d	double
> e	double
> a	int
> b	double
> 
> ===== Function df Symbol Table =====
> return	double
> d	double	param
> dd	double	param
> ch0	int
> calc	int
> ch1	char
> a	char
> b	short
> c	int
> x	double
> 
> Program
> ..FuncDeclaration
> ....Int
> ....Identifier(main)
> ....ParamList
> ......ParamDeclaration
> ........Void
> ..FuncDeclaration
> ....Void
> ....Identifier(chara)
> ....ParamList
> ......ParamDeclaration
> ........Int
> ........Identifier(integer)
> ......ParamDeclaration
> ........Double
> ......ParamDeclaration
> ........Void
> ........Identifier(a)
> ......ParamDeclaration
> ........Double
> ......ParamDeclaration
> ........Int
> ......ParamDeclaration
> ........Char
> ..Declaration
> ....Int
> ....Identifier(a)
> ....Natural(2) - int
> ..Declaration
> ....Void
> ....Identifier(as)
> ....Add - int
> ......Natural(2) - int
> ......Natural(2) - int
> ..Declaration
> ....Double
> ....Identifier(p)
> ....Sub - int
> ......Sub - int
> ........Sub - int
> ..........Natural(2) - int
> ..........Natural(2) - int
> ........Natural(2) - int
> ......Mul - int
> ........Mul - int
> ..........Natural(2) - int
> ..........Natural(2) - int
> ........Natural(2) - int
> ..Declaration
> ....Double
> ....Identifier(bs)
> ....Add - int
> ......Natural(2) - int
> ......Natural(2) - int
> ..Declaration
> ....Double
> ....Identifier(test)
> ..Declaration
> ....Void
> ....Identifier(a)
> ....Sub - undef
> ......Natural(2) - int
> ......Add - undef
> ........Sub - undef
> ..........Identifier(as) - undef
> ..........Identifier(aasd) - undef
> ........Mul - int
> ..........Natural(2) - int
> ..........Natural(2) - int
> ..Declaration
> ....Void
> ....Identifier(b)
> ..FuncDeclaration
> ....Int
> ....Identifier(test)
> ....ParamList
> ......ParamDeclaration
> ........Void
> ........Identifier(a)
> ......ParamDeclaration
> ........Int
> ..FuncDefinition
> ....Int
> ....Identifier(abcde)
> ....ParamList
> ......ParamDeclaration
> ........Int
> ........Identifier(a)
> ......ParamDeclaration
> ........Int
> ........Identifier(b)
> ......ParamDeclaration
> ........Int
> ........Identifier(i)
> ....FuncBody
> ......Return
> ........Identifier(b) - int
> ......While
> ........Eq - int
> ..........Identifier(i) - int
> ..........Natural(0) - int
> ........If
> ..........Or - int
> ............Store - int
> ..............Identifier(i) - int
> ..............And - int
> ................Natural(123) - int
> ................And - int
> ..................Lt - int
> ....................Identifier(i) - int
> ....................Natural(2) - int
> ..................BitWiseAnd - int
> ....................Identifier(i) - int
> ....................Natural(1) - int
> ............BitWiseOr - int
> ..............Identifier(i) - int
> ..............Natural(1) - int
> ..........Store - int
> ............Identifier(i) - int
> ............Natural(0123) - int
> ..........If
> ............Or - int
> ..............Eq - int
> ................Identifier(a) - int
> ................Natural(2) - int
> ..............And - int
> ................Le - int
> ..................Identifier(b) - int
> ..................Natural(2) - int
> ................Or - int
> ..................And - int
> ....................Ge - int
> ......................Identifier(c) - undef
> ......................Natural(3) - int
> ....................BitWiseXor - int
> ......................Identifier(d) - undef
> ......................Natural(0) - int
> ..................And - int
> ....................BitWiseOr - int
> ......................Identifier(x) - undef
> ......................Natural(1) - int
> ....................BitWiseAnd - int
> ......................Identifier(x) - undef
> ......................Natural(0) - int
> ............StatList
> ..............Store - int
> ................Identifier(b) - int
> ................Not - int
> ..................Identifier(b) - int
> ..............Store - undef
> ................Identifier(c) - undef
> ................Minus - undef
> ..................Identifier(c) - undef
> ..............Store - undef
> ................Identifier(c) - undef
> ................Mod - int
> ..................Minus - undef
> ....................Identifier(c) - undef
> ..................Minus - undef
> ....................Identifier(d) - undef
> ............Null
> ......StatList
> ........Store - int
> ..........Identifier(a) - int
> ..........Natural(1) - int
> ........Store - int
> ..........Identifier(b) - int
> ..........Natural(2) - int
> ......StatList
> ........Store - int
> ..........Identifier(a) - int
> ..........Natural(1) - int
> ........Store - int
> ..........Identifier(b) - int
> ..........Natural(2) - int
> ........Store - undef
> ..........Identifier(c) - undef
> ..........Natural(3) - int
> ........Store - undef
> ..........Identifier(d) - undef
> ..........Natural(4) - int
> ......Store - undef
> ........Identifier(e) - undef
> ........Natural(4) - int
> ......Store - undef
> ........Identifier(f) - undef
> ........Natural(5) - int
> ......If
> ........Identifier(a) - int
> ........Null
> ........StatList
> ..........Store - int
> ............Identifier(a) - int
> ............Natural(1) - int
> ..........Store - int
> ............Identifier(b) - int
> ............Natural(2) - int
> ......If
> ........Identifier(b) - int
> ........Null
> ........StatList
> ..........Store - undef
> ............Identifier(x) - undef
> ............Natural(1) - int
> ..........Store - undef
> ............Identifier(y) - undef
> ............Natural(2) - int
> ......If
> ........Identifier(c) - undef
> ........Null
> ........Null
> ......If
> ........Identifier(d) - undef
> ........StatList
> ..........Store - int
> ............Identifier(a) - int
> ............Natural(1) - int
> ..........Store - int
> ............Identifier(b) - int
> ............Natural(2) - int
> ..........Store - undef
> ............Identifier(c) - undef
> ............Natural(3) - int
> ........Null
> ..FuncDefinition
> ....Int
> ....Identifier(okokok)
> ....ParamList
> ......ParamDeclaration
> ........Void
> ....FuncBody
> ......Declaration
> ........Int
> ........Identifier(i)
> ........Add - undef
> ..........Identifier(i) - undef
> ..........Identifier(i) - undef
> ..FuncDeclaration
> ....Void
> ....Identifier(new)
> ....ParamList
> ......ParamDeclaration
> ........Void
> ..FuncDefinition
> ....Int
> ....Identifier(factorial)
> ....ParamList
> ......ParamDeclaration
> ........Int
> ........Identifier(number)
> ....FuncBody
> ......Declaration
> ........Int
> ........Identifier(answer)
> ........Natural(1) - int
> ......While
> ........Ne - int
> ..........Identifier(number) - int
> ..........Natural(0) - int
> ........StatList
> ..........Store - int
> ............Identifier(answer) - int
> ............Mul - int
> ..............Identifier(answer) - int
> ..............Identifier(number) - int
> ..........Store - int
> ............Identifier(number) - int
> ............Sub - int
> ..............Identifier(number) - int
> ..............Natural(1) - int
> ......Return
> ........Identifier(answer) - int
> ..FuncDefinition
> ....Int
> ....Identifier(recursive_factorial)
> ....ParamList
> ......ParamDeclaration
> ........Int
> ........Identifier(number)
> ....FuncBody
> ......If
> ........Eq - int
> ..........Identifier(num) - undef
> ..........Natural(0) - int
> ........Return
> ..........Natural(1) - int
> ........Null
> ......Return
> ........Mul - int
> ..........Identifier(number) - int
> ..........Call - int
> ............Identifier(recursive_factorial) - int(int)
> ............Identifier(number) - int
> ..FuncDefinition
> ....Int
> ....Identifier(tail_recursive_fac)
> ....ParamList
> ......ParamDeclaration
> ........Int
> ........Identifier(number)
> ......ParamDeclaration
> ........Int
> ........Identifier(k)
> ....FuncBody
> ......Declaration
> ........Int
> ........Identifier(bola)
> ......Declaration
> ........Int
> ........Identifier(i)
> ........Call - int
> ..........Identifier(bola) - int
> ..........Natural(2) - int
> ..........Natural(3) - int
> ......If
> ........Eq - int
> ..........Identifier(number) - int
> ..........Natural(0) - int
> ........Return
> ..........Natural(1) - int
> ........Null
> ......Return
> ........Call - int
> ..........Identifier(factorial) - int(int)
> ..........Sub - int
> ............Identifier(number) - int
> ............Natural(1) - int
> ..........Mul - int
> ............Identifier(k) - int
> ............Identifier(number) - int
> ..FuncDefinition
> ....Int
> ....Identifier(main)
> ....ParamList
> ......ParamDeclaration
> ........Void
> ....FuncBody
> ......Call - undef
> ........Identifier(func1) - undef
> ........Natural(1) - int
> ........Natural(2) - int
> ........Natural(3) - int
> ......Call - undef
> ........Identifier(func2) - undef
> ........Comma - int
> ..........Natural(1) - int
> ..........Natural(2) - int
> ........Natural(3) - int
> ......If
> ........Identifier(a) - int
> ........Store - undef
> ..........Identifier(statement1) - undef
> ..........Natural(1) - int
> ........Store - undef
> ..........Identifier(statement2) - undef
> ..........Natural(2) - int
> ......If
> ........Identifier(a) - int
> ........Store - undef
> ..........Identifier(statement1) - undef
> ..........Natural(1) - int
> ........Null
> ......If
> ........Identifier(a) - int
> ........Null
> ........Store - undef
> ..........Identifier(statement2) - undef
> ..........Natural(2) - int
> ......If
> ........Identifier(a) - int
> ........Null
> ........Null
> ......While
> ........Identifier(a) - int
> ........Store - undef
> ..........Identifier(statement2) - undef
> ..........Natural(2) - int
> ......While
> ........Identifier(a) - int
> ........Null
> ......While
> ........Identifier(a) - int
> ........Null
> ......While
> ........Identifier(a) - int
> ........StatList
> ..........Store - undef
> ............Identifier(statement1) - undef
> ............Natural(1) - int
> ..........Store - undef
> ............Identifier(statement2) - undef
> ............Natural(2) - int
> ..........Store - undef
> ............Identifier(statement3) - undef
> ............Natural(3) - int
> ......Store - undef
> ........Identifier(statement1) - undef
> ........Natural(1) - int
> ......StatList
> ........Store - undef
> ..........Identifier(statement1) - undef
> ..........Natural(1) - int
> ........Store - undef
> ..........Identifier(statement2) - undef
> ..........Natural(2) - int
> ......Declaration
> ........Int
> ........Identifier(i)
> ........Call - undef
> ..........Identifier(ctoi) - undef
> ..........Call - int
> ............Identifier(getchar) - int(void)
> ......Call - int
> ........Identifier(recursive_factorial) - int(int)
> ........Identifier(i) - int
> ......Call - int
> ........Identifier(tail_recursive_fac) - int(int,int)
> ........Identifier(i) - int
> ......Call - int
> ........Identifier(factorial) - int(int)
> ........Identifier(i) - int
> ......Return
> ........Natural(0) - int
> ......Return
> ........Null
> ..FuncDeclaration
> ....Void
> ....Identifier(soma)
> ....ParamList
> ......ParamDeclaration
> ........Int
> ........Identifier(a)
> ......ParamDeclaration
> ........Char
> ........Identifier(b)
> ..FuncDeclaration
> ....Void
> ....Identifier(subt)
> ....ParamList
> ......ParamDeclaration
> ........Int
> ......ParamDeclaration
> ........Char
> ......ParamDeclaration
> ........Double
> ..Declaration
> ....Int
> ....Identifier(a)
> ....Natural(3) - int
> ..Declaration
> ....Int
> ....Identifier(b)
> ....Natural(5) - int
> ..Declaration
> ....Int
> ....Identifier(d)
> ....Natural(3) - int
> ..Declaration
> ....Int
> ....Identifier(c)
> ....Natural(5) - int
> ..Declaration
> ....Double
> ....Identifier(t)
> ....Natural(3) - int
> ..FuncDefinition
> ....Int
> ....Identifier(chama)
> ....ParamList
> ......ParamDeclaration
> ........Void
> ....FuncBody
> ......If
> ........Eq - int
> ..........Identifier(o) - undef
> ..........Identifier(e) - undef
> ........StatList
> ..........While
> ............Identifier(abcd) - undef
> ............Null
> ..........Return
> ............Identifier(a) - int
> ........Null
> ......Return
> ........Identifier(c) - int
> ......Call - int
> ........Identifier(chama) - int(void)
> ........Natural(4) - int
> ......Return
> ........Identifier(b) - int
> ..FuncDefinition
> ....Int
> ....Identifier(uauu)
> ....ParamList
> ......ParamDeclaration
> ........Void
> ....FuncBody
> ......Declaration
> ........Char
> ........Identifier(a)
> ........Sub - int
> ..........Add - int
> ............Minus - int
> ..............Natural(4) - int
> ............Natural(3) - int
> ..........Minus - int
> ............Natural(3) - int
> ......Declaration
> ........Int
> ........Identifier(b)
> ........Sub - int
> ..........Add - int
> ............Identifier(a) - char
> ............Natural(4) - int
> ..........Minus - char
> ............Identifier(a) - char
> ......Declaration
> ........Char
> ........Identifier(a)
> ........Natural(5) - int
> ......Store - char
> ........Identifier(a) - char
> ........Natural(5) - int
> ......Eq - int
> ........Identifier(a) - char
> ........Natural(5) - int
> ......Lt - int
> ........Identifier(a) - char
> ........Natural(5) - int
> ......While
> ........Not - int
> ..........Identifier(a) - char
> ........If
> ..........Natural(2) - int
> ..........Store - char
> ............Identifier(a) - char
> ............Add - int
> ..............Natural(3) - int
> ..............Natural(3) - int
> ..........Store - char
> ............Identifier(a) - char
> ............Identifier(r) - undef
> ......While
> ........Or - int
> ..........And - int
> ............Eq - int
> ..............Identifier(a) - char
> ..............Natural(3) - int
> ............Lt - int
> ..............Identifier(b) - int
> ..............Identifier(a) - char
> ..........Lt - int
> ............Identifier(a) - char
> ............Natural(3) - int
> ........StatList
> ..........Store - char
> ............Identifier(a) - char
> ............Identifier(b) - int
> ..........Store - int
> ............Identifier(b) - int
> ............Natural(3) - int
> ..........While
> ............Natural(1) - int
> ............Store - char
> ..............Identifier(a) - char
> ..............Natural(0) - int
> ..........Store - int
> ............Identifier(c) - int
> ............Natural(5) - int
> ......If
> ........And - int
> ..........Eq - int
> ............Identifier(a) - char
> ............Natural(3) - int
> ..........BitWiseAnd - int
> ............Eq - int
> ..............Identifier(e) - undef
> ..............Natural(3) - int
> ............Natural(5) - int
> ........Return
> ..........Identifier(b) - int
> ........Null
> ......Return
> ........Identifier(a) - char
> ..FuncDefinition
> ....Int
> ....Identifier(ctoi)
> ....ParamList
> ......ParamDeclaration
> ........Char
> ........Identifier(c)
> ....FuncBody
> ......If
> ........And - int
> ..........Ge - int
> ............Identifier(c) - char
> ............ChrLit('0') - int
> ..........Le - int
> ............Identifier(c) - char
> ............ChrLit('9') - int
> ........Return
> ..........Sub - int
> ............Identifier(c) - char
> ............ChrLit('0') - int
> ........Null
> ..FuncDefinition
> ....Char
> ....Identifier(block)
> ....ParamList
> ......ParamDeclaration
> ........Char
> ........Identifier(a)
> ......ParamDeclaration
> ........Char
> ........Identifier(b)
> ....FuncBody
> ......If
> ........Lt - int
> ..........Identifier(a) - char
> ..........Identifier(b) - char
> ........StatList
> ..........Store - char
> ............Identifier(a) - char
> ............Sub - int
> ..............Identifier(a) - char
> ..............Natural(1) - int
> ..........Return
> ............Identifier(a) - char
> ........StatList
> ..........Store - char
> ............Identifier(b) - char
> ............Sub - int
> ..............Identifier(b) - char
> ..............Natural(1) - int
> ..........Return
> ............Identifier(b) - char
> ..FuncDefinition
> ....Int
> ....Identifier(check_your_priorities)
> ....ParamList
> ......ParamDeclaration
> ........Int
> ........Identifier(a)
> ......ParamDeclaration
> ........Int
> ........Identifier(b)
> ......ParamDeclaration
> ........Int
> ........Identifier(d)
> ....FuncBody
> ......Return
> ........Add - int
> ..........Add - int
> ............Identifier(a) - int
> ............Add - int
> ..............Mul - int
> ................Mul - int
> ..................Identifier(b) - int
> ..................Add - int
> ....................Div - int
> ......................Minus - int
> ........................Identifier(d) - int
> ......................Identifier(c) - int
> ....................Natural(3) - int
> ................Identifier(d) - int
> ..............Identifier(c) - int
> ..........Identifier(d) - int
> ..FuncDefinition
> ....Char
> ....Identifier(not_block)
> ....ParamList
> ......ParamDeclaration
> ........Char
> ........Identifier(a)
> ......ParamDeclaration
> ........Char
> ........Identifier(b)
> ....FuncBody
> ......If
> ........Lt - int
> ..........Call - undef
> ............Identifier(weird_char) - undef
> ............Identifier(a) - char
> ............Identifier(b) - char
> ..........Identifier(b) - char
> ........Return
> ..........Identifier(a) - char
> ........Return
> ..........Identifier(b) - char
> ..Declaration
> ....Int
> ....Identifier(x)
> ..Declaration
> ....Int
> ....Identifier(y)
> ..Declaration
> ....Int
> ....Identifier(z)
> ..FuncDefinition
> ....Double
> ....Identifier(check_your_decimal)
> ....ParamList
> ......ParamDeclaration
> ........Double
> ........Identifier(a)
> ......ParamDeclaration
> ........Double
> ........Identifier(b)
> ....FuncBody
> ......Declaration
> ........Double
> ........Identifier(PI)
> ........Decimal(3.14) - double
> ......Return
> ........Sub - double
> ..........Identifier(a) - double
> ..........Mul - double
> ............Identifier(b) - double
> ............Identifier(PI) - double
> ..FuncDefinition
> ....Int
> ....Identifier(main_0)
> ....ParamList
> ......ParamDeclaration
> ........Void
> ....FuncBody
> ......While
> ........Identifier(a) - int
> ........Return
> ..........Minus - int
> ............Natural(1) - int
> ......If
> ........Eq - int
> ..........Identifier(a) - int
> ..........Natural(2) - int
> ........Null
> ........Null
> ......If
> ........Eq - int
> ..........Identifier(a) - int
> ..........Natural(2) - int
> ........Return
> ..........Identifier(a) - int
> ........Return
> ..........Natural(5) - int
> ......While
> ........Eq - int
> ..........Identifier(b) - int
> ..........Natural(3) - int
> ........StatList
> ..........If
> ............Eq - int
> ..............Identifier(a) - int
> ..............Natural(2) - int
> ............Return
> ..............Identifier(a) - int
> ............Null
> ..........StatList
> ............If
> ..............Eq - int
> ................Identifier(a) - int
> ................Natural(2) - int
> ..............Return
> ................Identifier(a) - int
> ..............Null
> ............If
> ..............Eq - int
> ................Identifier(a) - int
> ................Natural(2) - int
> ..............Return
> ................Identifier(a) - int
> ..............Return
> ................Natural(5) - int
> ............If
> ..............Eq - int
> ................Identifier(a) - int
> ................Natural(2) - int
> ..............Return
> ................Identifier(a) - int
> ..............Null
> ............If
> ..............Eq - int
> ................Identifier(a) - int
> ................Natural(2) - int
> ..............Return
> ................Identifier(a) - int
> ..............Return
> ................Natural(5) - int
> ............If
> ..............Eq - int
> ................Identifier(a) - int
> ................Natural(2) - int
> ..............Return
> ................Identifier(a) - int
> ..............Return
> ................Natural(5) - int
> ..........Return
> ............Natural(90) - int
> ..Declaration
> ....Int
> ....Identifier(i)
> ....Natural(0) - int
> ..Declaration
> ....Int
> ....Identifier(j)
> ....Natural(2) - int
> ..Declaration
> ....Int
> ....Identifier(k)
> ..Declaration
> ....Char
> ....Identifier(ch0)
> ..Declaration
> ....Char
> ....Identifier(ch1)
> ....Natural(0) - int
> ..Declaration
> ....Char
> ....Identifier(ch2)
> ....ChrLit('0') - int
> ..FuncDeclaration
> ....Double
> ....Identifier(pow)
> ....ParamList
> ......ParamDeclaration
> ........Double
> ........Identifier(i)
> ..FuncDeclaration
> ....Double
> ....Identifier(pow)
> ....ParamList
> ......ParamDeclaration
> ........Double
> ........Identifier(i)
> ..FuncDeclaration
> ....Double
> ....Identifier(pow)
> ....ParamList
> ......ParamDeclaration
> ........Int
> ........Identifier(i)
> ..FuncDefinition
> ....Int
> ....Identifier(pow)
> ....ParamList
> ......ParamDeclaration
> ........Int
> ........Identifier(i)
> ....FuncBody
> ..Declaration
> ....Char
> ....Identifier(c1)
> ..Declaration
> ....Char
> ....Identifier(c2)
> ..Declaration
> ....Short
> ....Identifier(s)
> ..Declaration
> ....Short
> ....Identifier(t)
> ..Declaration
> ....Int
> ....Identifier(i)
> ..Declaration
> ....Int
> ....Identifier(j)
> ..FuncDefinition
> ....Char
> ....Identifier(f1)
> ....ParamList
> ......ParamDeclaration
> ........Void
> ....FuncBody
> ......Declaration
> ........Short
> ........Identifier(s)
> ......Declaration
> ........Int
> ........Identifier(i)
> ......Declaration
> ........Double
> ........Identifier(d)
> ......Declaration
> ........Double
> ........Identifier(d)
> ......Declaration
> ........Double
> ........Identifier(e)
> ......Declaration
> ........Int
> ........Identifier(a)
> ......Declaration
> ........Int
> ........Identifier(a)
> ......Declaration
> ........Double
> ........Identifier(b)
> ......Declaration
> ........Double
> ........Identifier(b)
> ......Declaration
> ........Double
> ........Identifier(a)
> ......Return
> ........Identifier(c1) - char
> ..Declaration
> ....Char
> ....Identifier(a)
> ..Declaration
> ....Char
> ....Identifier(a)
> ....ChrLit('a') - int
> ..Declaration
> ....Char
> ....Identifier(b)
> ..FuncDeclaration
> ....Int
> ....Identifier(blah)
> ....ParamList
> ......ParamDeclaration
> ........Void
> ..FuncDeclaration
> ....Double
> ....Identifier(df)
> ....ParamList
> ......ParamDeclaration
> ........Double
> ......ParamDeclaration
> ........Double
> ..FuncDefinition
> ....Double
> ....Identifier(df)
> ....ParamList
> ......ParamDeclaration
> ........Double
> ........Identifier(d)
> ......ParamDeclaration
> ........Double
> ........Identifier(dd)
> ....FuncBody
> ......Declaration
> ........Int
> ........Identifier(ch0)
> ........Natural(20) - int
> ......Declaration
> ........Int
> ........Identifier(calc)
> ......Declaration
> ........Char
> ........Identifier(ch1)
> ......If
> ........Store - int
> ..........Identifier(ch0) - int
> ..........Or - int
> ............Natural(3) - int
> ............Eq - int
> ..............Identifier(ch0) - int
> ..............Natural(3) - int
> ........Call - undef
> ..........Identifier(infinite_putchar) - undef
> ..........Identifier(ch0) - int
> ........Call - undef
> ..........Identifier(infinite_putchar) - undef
> ..........Store - int
> ............Identifier(ch0) - int
> ............Add - int
> ..............Identifier(ch0) - int
> ..............Natural(10) - int
> ......Store - char
> ........Identifier(ch2) - char
> ........Call - int
> ..........Identifier(getchar) - int(void)
> ......Store - char
> ........Identifier(ch1) - char
> ........Call - int
> ..........Identifier(getchar) - int(void)
> ......Declaration
> ........Char
> ........Identifier(a)
> ........ChrLit('a') - int
> ......Declaration
> ........Short
> ........Identifier(b)
> ........Natural(2) - int
> ......Declaration
> ........Int
> ........Identifier(c)
> ........Natural(3) - int
> ......Declaration
> ........Double
> ........Identifier(d)
> ........Decimal(3.0) - double
> ......Declaration
> ........Double
> ........Identifier(x)
> ........Decimal(1.5) - double
> ......Declaration
> ........Int
> ........Identifier(a)
> ........Natural(1) - int
> ......Declaration
> ........Int
> ........Identifier(b)
> ........Natural(2) - int
> ......Declaration
> ........Int
> ........Identifier(c)
> ........Natural(3) - int
> ......Declaration
> ........Short
> ........Identifier(d)
> ........Natural(4) - int
> ......Declaration
> ........Char
> ........Identifier(c)
> ........ChrLit('a') - int
> ......Store - char
> ........Identifier(a) - char
> ........Add - int
> ..........Mul - int
> ............Minus - int
> ..............Natural(1) - int
> ............Natural(3) - int
> ..........Div - int
> ............Natural(2) - int
> ............Natural(4) - int
> ......Declaration
> ........Short
> ........Identifier(a)
> ......Declaration
> ........Char
> ........Identifier(c)
> ......Add - undef
> ........Call - undef
> ..........Identifier(function) - undef
> ..........Natural(1) - int
> ........Call - undef
> ..........Identifier(function) - undef
> ..........Natural(1) - int
> ......Mul - int
> ........Natural(10) - int
> ........Lt - int
> ..........Natural(5) - int
> ..........Call - undef
> ............Identifier(function) - undef
> ............Natural(1) - int
> ......Mod - int
> ........Decimal(5.5) - double
> ........Call - undef
> ..........Identifier(nao_existe) - undef
> ......Div - double
> ........Decimal(5.5) - double
> ........Decimal(5.5) - double
> ......Ge - int
> ........Decimal(5.5) - double
> ........Natural(5) - int
> ......Ne - int
> ........Decimal(5.5) - double
> ........Identifier(a) - char
> ......Eq - int
> ........Natural(5) - int
> ........Identifier(a) - char
> ......BitWiseXor - int
> ........Decimal(5.5) - double
> ........Identifier(c) - int
> ......And - int
> ........Identifier(a) - char
> ........Identifier(c) - int
> ......Add - int
> ........Identifier(c) - int
> ........Identifier(c) - int
> ......Store - int
> ........Identifier(c) - int
> ........Natural(5) - int
> ......Store - int
> ........Identifier(c) - int
> ........Decimal(5.5) - double
> ......Return
> ........Call - double
> ..........Identifier(df) - double(double,double)
> ..........Identifier(d) - double
> ..........Identifier(e) - undef
